apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'io.fabric'

repositories {
    mavenCentral()
    maven { url 'https://maven.fabric.io/public' }
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"
    defaultConfig {
        applicationId "com.htoyama.likit"
        minSdkVersion 16
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
}

kapt {
    generateStubs = true
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile 'com.android.support:appcompat-v7:23.4.0'
    //compile 'com.android.support.constraint:constraint-layout:1.0.0-alpha2'
    compile 'io.reactivex:rxjava:1.1.5'
    compile 'io.reactivex:rxandroid:1.2.0'

    compile('com.twitter.sdk.android:twitter:1.13.2@aar') {
        transitive = true;
    }

    compile 'com.google.dagger:dagger:2.0.2'
    kapt 'com.google.dagger:dagger-compiler:2.0.2'
    provided 'org.glassfish:javax.annotation:10.0-b28'

    testCompile 'junit:junit:4.12'

    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support:support-annotations:23.4.0'
}

afterEvaluate {
    android.applicationVariants.each { variant ->

        def isRunningOnMac = "mac os x".equals System.getProperty("os.name").toLowerCase()
        if (isRunningOnMac) {
            return
        }

        def variantName = variant.name.capitalize()
        def fabTask = tasks.findByName("fabricGenerateResources${variantName}")
        fabTask.doFirst {
            println "ふぁｆｄさｆｓｄｆｄさふぁｓ"
        }

        def fooTask = tasks.create("generateFabricPropertiesFile${variantName}")
        fooTask.doFirst {
            println "ふーーーーーーーーーーーー"
        }

        println System.getProperty("os.name").toLowerCase()

        println "fabTask = " + fabTask.name
        def file = file("hogehoge.text")
        file.write(
            "twitterPluginId=" + System.getenv("LIKEDIT_FABRIC_TWITTER_PLUGIN_ID") + "\n" +
            "apiKey=" + System.getenv("LIKEDIT_FABRIC_API_KEY")
        )

        fabTask.dependsOn fooTask
    }
}
